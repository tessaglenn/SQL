--This is the database I used to do this project.
  CREATE TABLE vips (
     member_id INTEGER PRIMARY KEY
   , last_name TEXT
   , first_name TEXT
   , event INTEGER
   , provides_feedback_to INTEGER
   , association TEXT
   , assoc_type TEXT
   , member_since INTEGER
   );
   
CREATE TABLE reservations ( 
    member_id INTEGER
  , hotel INTEGER
  , welcome_rsvp BIT
  , dinner_rsvp BIT
  );
 
 
CREATE TABLE events (
    event_id INTEGER PRIMARY KEY
  , event_name TEXT
  , event_type TEXT
  );
  

CREATE TABLE hotels (
    hotel_id INTEGER PRIMARY KEY
  , hotel_name TEXT
  , address TEXT
  );


INSERT INTO vips VALUES
(2814, 'Fletcher', 'David', 5, 3742, 'Anishinabek Educational Institute', 'education', 2004)
,(1944, 'Kim', 'Jiho', 4, 4230, 'Appalachian State', 'education', 1991)
,(3889, 'Kowalski', 'Alex', 9, 3460, 'Brigg & McKinnnon AEC', 'private', 2015)
,(3775, 'Al-Hassan', 'Amina', 6, 3891, 'California Department of Water Resources', 'government', 2013)
,(4003, 'Chang', 'Nathan', 8, 3960, 'Chang Engineers, LLC', 'private', 2017)
,(3490, 'Anderson', 'Shanae', 2, 4315, 'Chicago Department of Public Health', 'government', 2008)
,(3077, 'Murphy', 'Aisling', 3, 2731, 'Climate Impacts on Farming Institute', 'research', 2006)
,(3960, 'Ivanov', 'Dmitri', 6, 2814, 'Cooperative Institute for Climate, Ocean, and Ecosystem Studies', 'research', 2016)
,(4402, 'Bennett', 'Leah', NULL, NULL, 'Denver Climate Research Foundation', 'research', 2024)
,(3891, 'Roy', 'Harper', 4, 3077, 'Environmental Science Associates', 'private', 2015)
,(4386, 'Silva', 'Thiago', NULL, NULL, 'Everglades Research Institute', 'research', 2023)
,(4297, 'Chukwu', 'Ifeoma', 9, 2716, 'Georgia State University', 'education', 2020)
,(3189, 'Martinez', 'Isabella', 8, 2011, 'Iowa State University', 'education', 2007)
,(3491, 'Gonzalez', 'Victor', 5, 3047, 'McGill University', 'education', 2008)
,(3742, 'Brown', 'Timothy', 3, 3490, 'Michigan State University', 'education', 2012)
,(4361, 'Riley', 'Daniel', 6, 1944, 'Minnesota Water Board', 'education', 2023)
,(1934, 'Garcia', 'Mateo', NULL, NULL, 'Oklahoma Department of Wildlife Conservation', 'government', 1990)
,(2011, 'Patel', 'Anika', 7, 3491, 'Renewable Energy Research Center, Honolulu', 'research', 1995)
,(4315, 'Shepherd', 'Priya', 10, 4003, 'Tech517', 'private', 2022)
,(1738, 'Johnson', 'Denny', NULL, NULL, 'Texas Department of Conservation and Natural Resources', 'government', 1987)
,(4230, 'Parker', 'Moss', 2, 3719, 'University of California, Davis', 'education', 2019)
,(2731, 'Rivera', 'Juan', 1, 4297, 'University of Montana', 'education', 2003)
,(2091, 'Haines', 'Keisha', 11, 3189, 'University of North Carolina', 'education', 1998)
,(2551, 'Nguyen', 'Linh', 2, 2091, 'University of Pennsylvania', 'education', 2002)
,(3047, 'Singh', 'Aarav', 4, 2551, 'US Department of Fish and Wildlife', 'government', 2005)
,(4112, 'Fernandez', 'Lucia', NULL, NULL, 'US Department of Fish and Wildlife', 'government', 2018)
,(3719, 'Denton', 'K. L.', 11, 3889, 'US Department of Housing and Urban Development', 'government', 2011)
,(3460, 'Chen', 'Beverly', 7, 4361, 'US Department of Natural Resources', 'government', 2008)
,(2716, 'Rodriguez', 'Sofia', 7, 3775, 'US Department of Renewable Energy', 'government', 2003)
,(2800, 'Lee', 'Min-Jun', NULL, NULL, 'US Department of Renewable Energy', 'government', 2004)
;


INSERT INTO reservations VALUES
 (3491,  1, 1, 1)
,(4361,  1, 1, 1)
,(3047,  2, 1, 1)
,(3775,  1, 1, 1)
,(4003,  3, 0, 1)
,(4402,  2, 1, 1)
,(3891,  3, 1, 1)
,(2011,  1, 1, 1)
,(4808,  2, 1, 1)
,(3490,  1, 0, 1)
,(3189,  1, 1, 1)
,(1944,  1, 0, 1)
,(2716,  2, 0, 1)
,(2551,  2, 1, 1)
,(4386,  2, 0, 1)
,(2814,  3, 1, 1)
,(1738,  2, 0, 1)
,(3960,  1, 1, 1)
,(4315,  3, 1, 0)
,(4722,  2, 1, 1)
,(2731,  3, 1, 1)
,(2091,  1, 1, 0)
,(3889,  3, 1, 1)
,(3742,  2, 0, 1)
,(3719,  2, 0, 1)
,(3460,  2, 1, 1)
,(3077,  2, 0, 1)
,(4420,  1, 1, 0)
,(2800,  2, 0, 1)
,(1934,  3, 1, 1)
;


INSERT INTO events VALUES
  (1, 'Climate Change Communication: Engaging the Public and Policy Makers', 'Keynote')
, (2, 'Climate Change and Public Health: Risks and Responses', 'Panel')
, (3, 'Climate Change and Agriculture: Ensuring Food Security', 'Panel')
, (4, 'Biodiversity and Ecosystem Services in a Changing Climate', 'Panel')
, (5, 'Indigenous Knowledge and Climate Change Adaptation', 'Panel')
, (6, 'The Role of Oceans in Climate Change: Impacts and Solutions', 'Panel')
, (7, 'Climate Change and Renewable Energy: Innovations and Challenges', 'Panel')
, (8, 'Climate Justice and Equity: Addressing Disproportionate Impacts', 'Panel')
, (9, 'The Economic Impact of Climate Change: Costs and Opportunities', 'Panel')
, (10, 'Technological Innovations for Climate Monitoring and Assessment', 'Workshop')
, (11, 'Urban Resilience: Designing Climate-Smart Cities', 'Workshop')
, (12, 'The Role of Policy in Combating Climate Change', 'Workshop')
;


INSERT INTO hotels VALUES
   (1, 'Hyatt Downtown', '392 South Main Street, Cityville, PA')
 , (2, 'Marriott', '1240 Marshall Avenue, Cityville, PA')
 , (3, 'Four Season''s', '900 Winter Road, Cityville, PA')
 ;

-- Below are the questions that I answered and queried.

--First, I'm going to select 5 rows from each table to understand what the data in each table looks like.
SELECT * FROM vips LIMIT 5;
SELECT * FROM reservations LIMIT 5;
SELECT * FROM events LIMIT 5;
SELECT * FROM hotels LIMIT 5;

--How many VIPs will be attending each event?
SELECT e.event_name, COUNT(v.member_id) total_attendees
FROM events e
LEFT JOIN vips v
ON e.event_id = v.event
GROUP BY e.event_id
ORDER BY total_attendees DESC;
--First, I wanted to return each event name and the count of how many members would be attending each. I joined the events and vips tables to link each member with their event, using a left join so that members that 
--are not attending events would not be included. Then I used GROUP BY so the query knew to count all the members for each event.

--Which VIPs have either a welcome rsvp or a dinner rsvp?
SELECT v.member_id, (v.first_name || ' ' || v.last_name) AS name, r.welcome_rsvp, r.dinner_rsvp
FROM vips v
JOIN reservations r
ON v.member_id = r.member_id
ORDER BY name;
--In this query, I combined the first and last names of each VIP to make it easily readable. I then joined the vips and reservations tables with an inner join so I did not include any members who did not have either
--reservation. I also ordered the results in alphabetical order by name to make the results easily readable.

--Make a table showing what hotel each VIP will be staying at. Include the VIP's full name and the hotel's name.
SELECT (v.first_name || ' ' || v.last_name) AS vip_name, h.hotel_name
FROM vips v
LEFT JOIN reservations r
ON v.member_id = r.member_id
LEFT JOIN hotels h
ON r.hotel = h.hotel_id
ORDER BY h.hotel_name;
--I combined the members' first and last names again for readability. Then I joined the vips and reservations table AND the reservations and hotels table to be able to connect each VIP with the name of their hotel. 
--Using LEFT JOINS, I am able to get only the relevant data, leaving out VIPs without a hotel reservation and leaving out any possible hotels who do not have a VIP staying there.

--What events are the VIPs attending who have the same association type as Jiho Kim?
SELECT (v.first_name || ' ' || v.last_name) AS name, e.event_name
FROM vips v
LEFT JOIN events e
ON v.event = e.event_id
WHERE v.assoc_type = (SELECT v.assoc_type FROM vips v WHERE v.last_name = "Kim" AND v.first_name = "Jiho");
--I used a subquery to find the association type for Jiho Kim. I then built around that subquery to find the name and event type for other VIPs who are also apart of the same association type.


--Create a table that shows who each VIP is providing feedback to, including their member id, full name of the reviewer, and full name of the one being reviewed.
SELECT reviewer.member_id AS reviewer_id, 
(reviewer.first_name || ' ' || reviewer.last_name) AS reviewer_name,
being_reviewed.member_id AS presenter_id,
(being_reviewed.first_name || ' ' || being_reviewed.last_name) AS presenter_name
FROM vips AS reviewer
LEFT JOIN vips AS being_reviewed
ON reviewer.provides_feedback_to = being_reviewed.member_id;
--I used a SELF JOIN in this query to differentiate between the members that are reviewing and the members that are presenting. I used a LEFT JOIN here to see which members are not reviewing someone else. The LEFT
--JOIN prioritizes showing data from all members.

-- Build the same table as the last, but exclude members who are not reviewing anyone.
SELECT reviewer.member_id AS reviewer_id, 
(reviewer.first_name || ' ' || reviewer.last_name) AS reviewer_name,
being_reviewed.member_id AS presenter_id,
(being_reviewed.first_name || ' ' || being_reviewed.last_name) AS presenter_name
FROM vips AS reviewer
JOIN vips AS being_reviewed
ON reviewer.provides_feedback_to = being_reviewed.member_id;
--This query is similar to the last query, except here I used an INNER JOIN. The INNER JOIN only returns data for members who are reviewing someone.

-- Which VIPs have both a welcome rsvp and a dinner rsvp?
SELECT v.member_id, (v.first_name || ' ' || v.last_name) AS name, r.welcome_rsvp, r.dinner_rsvp
FROM vips v
JOIN reservations r
ON v.member_id = r.member_id
WHERE r.welcome_rsvp = 1
AND dinner_rsvp = 1
ORDER BY name;
--This query again simplifies the names for the VIPs as well as JOINs the vips and reservations tables using an INNER JOIN since I only want like data from both tables. I use WHERE and AND statements to filter out
--VIPs that do not have a welcome rsvp and a dinner rsvp.

-- Which VIP has been a member the longest that also has reservations for a hotel and which one they're staying at, welcome rsvp, and dinner rsvp?
SELECT (v.first_name || ' ' || v.last_name) AS name, MIN(v.member_since) AS member_since, h.hotel_name
FROM vips v
LEFT JOIN reservations r
ON v.member_id = r.member_id
LEFT JOIN hotels h
ON r.hotel = h.hotel_id
WHERE r.welcome_rsvp = 1
AND r.dinner_rsvp = 1
AND r.hotel <> 0;
--This query uses the MIN function to find the member with the longest tenure. I then use LEFT JOINS to find the members that have a hotel reservation and which hotels have members staying at them. I once again filter
--out members that do not have a welcome rsvp, a dinner rsvp, and a hotel reservation.

-- How many members are there for each association type?
SELECT assoc_type, COUNT(*) as total
FROM vips
GROUP BY assoc_type
ORDER BY total DESC;
--This query selects the association type and counts the rows of each vip, then groups the count by the association type to find how many belong to each association type.

-- How many members are at each hotel?
SELECT h.hotel_name, COUNT(r.member_id) AS total
FROM reservations r
LEFT JOIN hotels h
ON r.hotel = h.hotel_id
GROUP BY h.hotel_id
ORDER BY total DESC;
--This query selects each hotel name and a count for all members that is later grouped by hotel name. I use a LEFT JOIN once again to filter out any possible hotels that do not have a member staying there.
