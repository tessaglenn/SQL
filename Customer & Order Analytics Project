#In this SQL Project, I'm querying a database with multiple tables in it to analyze statistics about customer and order data. 

--1. How many many unique orders were placed in January? In other words, how many distinct order ids do we have?
SELECT COUNT(DISTINCT orderID) unique_orders 
FROM BITDB.JanSales
WHERE LENGTH(orderID)=6
AND orderID <> 'Order ID';
--This query uses the COUNT function and the DISTINCT statement to find the total distinct orders made in January. It also cleans the data by filtering out Order IDs that are missing or inccorect with the WHERE clause.

--2. How many of those orders were for an iPhone?
SELECT COUNT(DISTINCT orderID) iPhone_orders
FROM BITDB.JanSales
WHERE Product = 'iPhone'
AND LENGTH(orderID) = 6
AND orderID <> 'Order ID';
--This query counts the distinct order ids like the last one but further filters the data to only include those with the product type of iPhone.

--3. Select the customer account numbers for all the orders that were placed in February.
SELECT * FROM BITDB.FebSales;
SELECT DISTINCT c.acctnum
FROM BITDB.customers c
JOIN BITDB.FebSales f
ON c.order_id = f.orderID
WHERE LENGTH(f.orderID) = 6
AND f.orderID <> 'Order ID';
--To find the account numbers that ordered in February, I used an INNER JOIN to match the account numbers that also ordered in February. I continued to use the WHERE clause to make sure I'm only using clean data.

--4. Which product was the cheapest one sold in January, and what was the price?
SELECT DISTINCT Product, price
FROM BITDB.JanSales
WHERE price IN 
    (SELECT MIN(price) FROM BITDB.JanSales);
--First, I created a subquery to find the minimum price in the table. Then, I created a table around it to show the distinct product and it's price.

--5. What is the total revenue for each product sold in January? 
SELECT Product, ROUND((SUM(quantity) * price), 2) AS revenue
FROM BITDB.JanSales
GROUP BY Product
ORDER BY revenue DESC;
--I selected the product and calculated it's revenue by adding up the quantity of all of each product sold and mulitplying it by the price. I used the GROUP BY statement to ensure it calculated the revenue for 
--each product, and I used the ROUND function and ORDER BY statement to improve readability.

--6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT Product, SUM(Quantity), ROUND((SUM(Quantity)*price), 2) AS revenue
FROM BITDB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;
--This query selects the products this customer ordered, the total of how many of each they ordered, and calculates the total revenue for each.

--7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT COUNT(DISTINCT c.acctnum) AS total_customers, ROUND(AVG(f.price*f.quantity),2) AS avg_spent
FROM BITDB.customers c
JOIN BITDB.FebSales f
ON c.order_id = f.orderID
WHERE f.quantity > 2
AND LENGTH(f.orderID) = 6
AND f.orderID <> 'OrderID';
--This query counts the distinct account numbers for customers who ordered more than two products in February (using WHERE f.quantity > 2) and returns the data along with the average amount these customers spent,
--rounded for readability. I also used the WHERE clause to filter out incorrect or incomplete account number data. 

--8. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT DISTINCT Product, SUM(quantity) AS total_sold
FROM BITDB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product
ORDER BY total_sold DESC;
--This query selects each product and totals the amount of each sold. I then use the WHERE clause with LIKE to filter down to only the orders placed in Los Angeles.

--9. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT DISTINCT location, COUNT(orderID) AS total_orders
FROM BITDB.JanSales
WHERE location LIKE '%New York%'
AND length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY location
HAVING total_orders >= 3;
--This query returns each distinct location and a count of each location's total orders. I used the WHERE clause to show only New York locations and filter out missing or incomplete data. I then used the HAVING clause to filter the aggregated data to only show the locations with at least 3 orders.

--10. How many of each type of headphone were sold in February?
SELECT DISTINCT Product, SUM(Quantity) AS total_sold
FROM BITDB.FebSales
WHERE Product LIKE '%Headphone%'
GROUP BY Product;
--Here, I gathered each distinct product and the total sold and filtered out any product that did not have "Headphone" in its name.

--11. What was the average amount spent per account in February? (For this question, we want the average amount spent / number of accounts, not the amount spent by each account.)
SELECT AVG(f.price*f.quantity) avg_spent
FROM BITDB.FebSales f
LEFT JOIN BITDB.customers c
ON f.orderID = c.order_id
WHERE length(c.order_ID) = 6
AND c.order_ID <> 'Order ID';
--I JOINED the FebSales table with the customers table to gather only the data for customers who ordered in February. I then calculated the average amount spent by all the customers.

--12. What was the average quantity of products purchased per account in February? (Just like question 11, we want the overall average, not the average for each account individually).
SELECT SUM(f.quantity)/COUNT(c.acctnum) avg_num_items
FROM BITDB.FebSales f
LEFT JOIN BITDB.customers c
ON f.orderID = c.order_id
WHERE length(f.orderID) = 6
AND f.orderID <> 'Order ID';
--Like the last question, I joined the two tables together, but this time I calculated the average number of items by dividing the total quantity of items sold by the number of accounts that placed orders in February.

--13. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT DISTINCT Product, SUM(Quantity * price) AS revenue
FROM BITDB.JanSales
GROUP BY Product
ORDER BY revenue DESC
LIMIT 1;
--This query shows each product and the total revenue it brought in, but using the ORDER BY and LIMIT clauses allowed me to filter to show only the product that brought in the most revenue.



